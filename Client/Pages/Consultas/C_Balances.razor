@page "/PagosRestantes"
@inject HttpClient httpClient

<div class="card">
    <div class="card">

        <div class="card-header">
            <h3> Almacen de Prestamos  </h3>
        </div>
        <div class="card-body">
            <form>
                <div class="input-group d-flex align-items-end">
                    <InputSelect class="form-control col-2" @bind-Value="filtro">
                        @foreach(var Criterio in Atributos)
                        {
                        <option value="Criterio">@Criterio</option>

                        }
                    </InputSelect>
                    <div class="flex-fill mx-2">
                        <div class="input-group">
                            <label class="input-group-text"> Busqueda </label>
                            <input class="form-control" @oninput=@(args => Filtrar(args.Value.ToString()))/>

                        </div>
                    </div>
                    <button type="button" class="btn btn-sm-10 btn-primary" @onclick="Reiniciar"> <span class="oi oi-reload"></span> Reiniciar </button>

                </div>
            </form>

        </div>
        @if (ListPrestamos is not null)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>PrestamosId</th>
                        <th>ID del Deudor</th>
                        <th>Fecha de desembolso </th>
                        <th>MontoSolicitado</th>
                        <th>Interes</th>
                        <th>Coutas</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Prestamos in ListPrestamos)
                    {
                        <tr>
                            <td>@Prestamos.PrestamoId</td>
                            <td>@Prestamos.ClienteId</td>
                            <td>@Prestamos.FechaPrestamo</td>
                            <td>@Prestamos.MontoSolicitado</td>
                            <td>@Prestamos.Interes</td>
                            <td>@Prestamos.Coutas</td>
                            <td><a href="Prestamos/@Prestamos.PrestamoId">Ver</a></td>
                        </tr>
                    }

                </tbody>

            </table>
        }
    </div>
    <div class="card-footer">
        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
            <div class="col-3">
                <label for="CantidaRegistro" class="col-form-label"><strong>Filas</strong>&nbsp;</label>
                <input id="CantidaRegistro" @bind-value="@conteo" disabled class="form-control" />
            </div>
        </div>
    </div>
</div>

@code {

    public int conteo { get; set; }
    public string? filtro { get; set; }= "";
    public string? Criterio { get; set; }
    public List<Prestamos> ListPrestamos = new List<Prestamos>();
    public List<string> Atributos { get; set; } = new List<string> { "PrestamoId", "ClienteId", "MontoSolicitado","Interes", "Cuotas" };
    
     protected override async Task OnInitializedAsync()
    {
        this.ListPrestamos= await httpClient.GetFromJsonAsync<List<Prestamos>>("api/Prestamos");
        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

    }
    public async Task Buscar()
    {
        ListPrestamos = await httpClient.GetFromJsonAsync<List<Prestamos>>($"api/Prestamos");

        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;
        StateHasChanged();

    }

    public async Task Reiniciar()
    {
        ListPrestamos = await httpClient.GetFromJsonAsync<List<Prestamos>>($"api/Prestamos");
        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;
        StateHasChanged();

    }

    public async Task Filtrar(string Contenido)
    {
        switch(this.filtro)
                {
                    case "PrestamoId":
                        this.ListPrestamos=  ListPrestamos.Where(e => Convert.ToString(e.PrestamoId).Contains(Contenido)).ToList();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;
                    case "ClienteId":
                        this.ListPrestamos=  ListPrestamos.Where(e => Convert.ToString(e.ClienteId).Contains(Contenido)).ToList();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;
                    case "MontoSolicitado":
                        this.ListPrestamos=  ListPrestamos.Where(e => Convert.ToString(e.MontoSolicitado).Contains(Contenido)).ToList();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;
                    case "Coutas":
                        this.ListPrestamos=  ListPrestamos.Where(e => Convert.ToString(e.Coutas).Contains(Contenido)).ToList();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;
                    case "Interes":
                        this.ListPrestamos=  ListPrestamos.Where(e => Convert.ToString(e.Interes).Contains(Contenido)).ToList();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;
                        break;
                    case "":
                        this.ListPrestamos=  ListPrestamos;
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;
                    default:
                        this.ListPrestamos= new List<Prestamos>();
                        conteo = ListPrestamos != null ? ListPrestamos!.Count() : 0;

                        break;

                }
            
    }


}
@page "/RegistroPrestamos"
@page "/RegistroPrestamos/{PrestamoId:int}"
@inject HttpClient httpClient
@inject IToastService services 


<EditForm Model="Prestamos" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3>Registro de Prestamos.</h3>
            </div>
            <div class=card-body>

                @*Prestamos Id:*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Prestamos Id:</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Prestamos.PrestamoId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Fecha:*@
                <div class="mb-3">
                    <label class="form-label" for="Fecha">Fecha de desembolso:</label>
                    <InputDate @bind-Value="Prestamos.FechaPrestamo" class="form-control" />
                    <ValidationMessage For="@(() => Prestamos.FechaPrestamo)" />
                </div>

                @*SolicitadoPor*@
                        <div class="col-md-6">
                            <label>Solicitado Por:</label>
                            <InputSelect class="form-select" @bind-Value="Prestamos.ClienteId">
                                <option value="0" disabled selected> [Seleccione] </option>
                                @foreach (var cliente in ListClientes)
                                {
                                    <option value="@cliente.ClienteId">@cliente.Nombres | Cedula: @cliente.cedula  | Direccion : @cliente.Direccion </option>
                                }
                            </InputSelect>
                        </div>

                @*Garante del prestamo*@
                        <div class="col-md-6">
                            <label>Garante del prestamo:</label>
                            <InputSelect class="form-select" @bind-Value="Prestamos.GaranteId">
                                <option value="0" disabled selected> [Seleccione] </option>
                                @foreach (var garante in ListGarantes)
                                {
                                    <option value="@garante.GaranteId">@garante.Nombres | Cedula: @garante.cedula  | Direccion : @garante.Direccion </option>
                                }
                            </InputSelect>
                        </div>
                @*MontoSolicitado*@
                <div class="col-md-6">
                    <label class="form-label" for="MontoSolicitado">Monto del Prestamo:</label>
                    <InputNumber @bind-Value="Prestamos.MontoSolicitado" class="form-control" />
                    <ValidationMessage For="@(() => Prestamos.MontoSolicitado)" />
                </div>
                @*Interes*@
                <div class="col-md-6">
                    <label class="form-label" for="Interes">Tasa de interes</label>
                    <InputNumber @bind-Value="Prestamos.Interes" class="form-control" />
                    <ValidationMessage For="@(() => Prestamos.Interes)" />
                </div>
                @*Lapso de pago*@
                <div class="col-md-6">
                    <label class="form-label" for="Coutas">Coutas expresadas en meses</label>
                    <InputNumber @bind-Value="Prestamos.Coutas" class="form-control" />
                    <ValidationMessage For="@(() => Prestamos.Coutas)" />
                </div>
                <div>
                <button type="button" class="btn btn-outline-info" @onclick="CalcularAmortizacion">Calcular Amortización <i class="oi oi-calculator" /></button>
                   </div>  
                      @if (TablaAmortizacion.Any())
                        {
                            <h4>Tabla de Amortización</h4>
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Mes</th>
                                        <th>Fecha de Pago</th>
                                        <th>Pago de Interés</th>
                                        <th>Pago de Capital</th>
                                        <th>Saldo Restante</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var entrada in TablaAmortizacion)
                                    {
                                        <tr>
                                            <td>@entrada.Mes</td>
                                            <td>@entrada.FechaPago.ToShortDateString()</td>
                                            <td>@entrada.PagoInteres.ToString("C2")</td>
                                            <td>@entrada.PagoCapital.ToString("C2")</td>
                                            <td>@entrada.SaldoRestante.ToString("C2")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }

            </div>
            <div class="card-footer d-flex justify-content-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>


</EditForm>
<label>@Mensaje</label>

@code {

    [Parameter]
    public int PrestamoId { get; set; }
    public int CoutasOriginal { get; set; }
    public Prestamos Prestamos { get; set; } = new Prestamos();
    public string Mensaje { get; set; } = string.Empty;
    public List<Clientes> ListClientes { get; set; } = new List<Clientes>();
    public List<Garantes> ListGarantes { get; set; } = new List<Garantes>();
    private List<EntradaAmortizacion> TablaAmortizacion { get; set; } = new List<EntradaAmortizacion>();
    public class EntradaAmortizacion
    {
        public int Mes { get; set; }
        public DateTime FechaPago { get; set; }
        public double PagoInteres { get; set; }
        public double PagoCapital { get; set; }
        public double SaldoRestante { get; set; }
    }

    private void CalcularAmortizacion()
    {
        TablaAmortizacion.Clear();

        double capital = Prestamos.MontoSolicitado;
        double tasaInteres = Convert.ToDouble(Prestamos.Interes) / 100.0 / 12; 
        int meses = Prestamos.Coutas;

        for (int mes = 1; mes <= meses; mes++)
        {
            double pagoInteres = capital * tasaInteres;
            double pagoCapital = Prestamos.MontoSolicitado / meses;

            TablaAmortizacion.Add(new EntradaAmortizacion
            {
                Mes = mes,
                FechaPago = Prestamos.FechaPrestamo.AddMonths(mes),
                PagoInteres = pagoInteres,
                PagoCapital = pagoCapital,
                SaldoRestante = capital - pagoCapital
            });

            capital -= pagoCapital;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(PrestamoId>0)
        {
            this.Prestamos.PrestamoId = PrestamoId;
            await Buscar();
        }
        this.ListClientes= await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
        this.ListGarantes= await httpClient.GetFromJsonAsync<List<Garantes>>("api/Garantes");
    }

    public async Task Buscar()
    {
        var PrestamosEncontrado = await httpClient.GetFromJsonAsync<Prestamos>($"api/Prestamos/{Prestamos.PrestamoId}");
        if (PrestamosEncontrado != null)
        {
            services.ShowSuccess("Prestamos encontrado");
            this.Prestamos = PrestamosEncontrado;
            StateHasChanged();
        }
        else
        {
            services.ShowError("Prestamos no encontrado");
        }
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Prestamos", Prestamos);
        if (!response.IsSuccessStatusCode)
        {
            services.ShowError("No fue posible guardar");
            services.ShowInfo("Sugerimos revisar a detalle los datos suministrados");

            return;
        }
        var PrestamosDevuelto = await response.Content.ReadFromJsonAsync<Prestamos>();
        if (PrestamosDevuelto is not null)
        {
            services.ShowSuccess("Guardado satisfactoriamente");
            Prestamos = PrestamosDevuelto;
            StateHasChanged();
        }
        Nuevo();
    }

    public void Nuevo()
    {
        services.ShowInfo("Nuevo Registro");
        this.Prestamos = new Prestamos();
        Mensaje = string.Empty;
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Prestamos/{Prestamos.PrestamoId}");
        if (!response.IsSuccessStatusCode)
        {
            services.ShowError("No fue posible eliminar");
            return;
        }
        else
            services.ShowSuccess("Eliminado satisfactoriamente");
            Nuevo();
    }
}